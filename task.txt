# API:
```
openapi: 3.0.0
info:
  title: Тестовое задание для отбора на Backend Bootcamp
  version: 1.0.0
paths:
  /dummyLogin:
    get:
      description: >-
        Упрощенный процесс получения токена для дальнейшего прохождения авторизации
      tags:
        - noAuth
      parameters:
        - name: user_type
          in: query
          schema:
            $ref: '#/components/schemas/UserType'
          required: true
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/Token'
        '500':
          $ref: '#/components/responses/5xx'
  /house/create:
    post:
      description: >-
        Создание нового дома.
      tags:
        - moderationsOnly
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - year
              properties:
                address:
                  $ref: '#/components/schemas/Address'
                year:
                  $ref: '#/components/schemas/Year'
                developer:
                  $ref: '#/components/schemas/Developer'
      responses:
        '200':
          description: Успешно создан дом
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
  /house/{id}:
    get:
      description: >-
        Получение квартир в выбранном доме.
        Для обычных пользователей возвращаются только квартиры в статусе approved, для модераторов - в любом статусе
      tags:
        - authOnly
      security:
        - bearerAuth: []
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/HouseId'
          required: true
          in: path
      responses:
        '200':
          description: Успешно получены квартиры в доме
          content:
            application/json:
              schema:
                type: object
                required:
                  - flats
                properties:
                  flats:
                    type: array
                    items:
                      $ref: '#/components/schemas/Flat'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
  /flat/create:
    post:
      description: >-
        Создание квартиры.
        Квартира создается в статусе created
      tags:
        - authOnly
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - house_id
                - price
                - room
              properties:
                house_id:
                  $ref: '#/components/schemas/HouseId'
                price:
                  $ref: '#/components/schemas/Price'
                rooms:
                  $ref: '#/components/schemas/Rooms'
      responses:
        '200':
          description: Успешно создана квартира
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flat'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
  /flat/update:
    post:
      description: >-
        Обновление квартиры.
      tags:
        - moderationsOnly
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - price
                - room
              properties:
                id:
                  $ref: '#/components/schemas/FlatId'
                status:
                  $ref: '#/components/schemas/Status'
      responses:
        '200':
          description: Успешно обновлена квартира
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flat'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
components:
  responses:
    '400':
      description: Невалидные данные ввода
    '401':
      description: Неавторизованный доступ
    5xx:
      description: Ошибка сервера
      headers:
        Retry-After:
          description: Время, через которое еще раз нужно сделать запрос
          required: false
          schema:
            type: integer
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Описание ошибки
                example: что-то пошло не так
              request_id:
                type: string
                description: >-
                  Идентификатор запроса. Предназначен для более быстрого поиска
                  проблем.
                example: g12ugs67gqw67yu12fgeuqwd
              code:
                type: integer
                description: >-
                  Код ошибки. Предназначен для классификации проблем и более
                  быстрого решения проблем.
                example: 12345
  schemas:
    UserId:
      type: string
      format: uuid
      description: Идентификатор пользователя
      example: 'cae36e0f-69e5-4fa8-a179-a52d083c5549'
    Address:
      type: string
      description: Адрес дома
      example: Лесная улица, 7, Москва, 125196
    Year:
      type: integer
      description: Год постройки дома
      example: 2000
      minimum: 0
    Developer:
      type: string
      nullable: true
      description: Застройщик 
      example: Мэрия города
    House:
      type: object
      description: Дом
      required:
        - id
        - address
        - year
      properties:
        id:
          $ref: '#/components/schemas/HouseId'
        address:
          $ref: '#/components/schemas/Address'
        year:
          $ref: '#/components/schemas/Year'
        developer:
          $ref: '#/components/schemas/Developer'
        created_at:
          $ref: '#/components/schemas/Date'
        update_at:
          $ref: '#/components/schemas/Date'
    HouseId:
      type: integer
      description: Идентификатор дома
      example: 12345
      minimum: 1
    Price:
      type: integer
      description: Цена квартиры в у.е.
      example: 10000
      minimum: 0
    Rooms:
      type: integer
      description: Количество комнат в квартире
      example: 4
      minimum: 1
    Flat:
      type: object
      description: Квартира
      required:
        - id
        - house_id
        - price
        - rooms
        - status
      properties:
        id:
          $ref: '#/components/schemas/FlatId'
        house_id:
          $ref: '#/components/schemas/HouseId'
        price:
          $ref: '#/components/schemas/Price'
        rooms:
          $ref: '#/components/schemas/Rooms'
        status:
          $ref: '#/components/schemas/Status'
    Status:
      type: string
      enum: [created, approved, declined, on moderation]
      description: Статус квартиры
      example: approved
    FlatId:
      type: integer
      description: Идентификатор квартиры
      example: 123456
      minimum: 1
    Email:
      type: string
      format: email
      description: Email пользователя
      example: test@gmail.com    
    Password:
      type: string
      description: Пароль пользователя
      example: Секретная строка
    UserType:
      type: string
      enum: [client, moderator]
      description: Тип пользователя
      example: moderator
    Token:
      type: string
      description: Авторизационный токен
      example: auth_token
    Date:
      type: string
      description: Дата + время
      format: date-time
      example: 2017-07-21T17:32:28Z
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Авторизация по токену, который был получен в методах /dummyLogin или /login
tags:
  - name: noAuth
    description: Доступно всем, авторизация не нужна
  - name: authOnly
    description: Доступно любому авторизированному
  - name: moderationsOnly
    description: Доступно только для модераторов

```

# Задание:
# Тестовое задание для отбора на Avito Backend Bootcamp
## Сервис домов

На Авито ежедневно публикуются тысячи объявлений о продаже или аренде недвижимости. Они попадают в каталог домов, в котором пользователь может выбрать жильё по нужным параметрам в понравившемся доме. 

Прежде чем попасть в каталог, объявление проходит тщательную модерацию, чтобы в нём не было недопустимого контента. 
## Описание задачи 

Разработайте backend-сервис, с помощью которого пользователь сможет продать квартиру, загрузив объявление на Авито. 
### Функционал сервиса: 
1. **Авторизация пользователей:**
	1. Используя ручку /dummyLogin и передав в неё желаемый тип пользователя (client, moderator), сервис в ответе вернет токен с соответствующим уровнем доступа — обычного пользователя или модератора. Этот токен нужно передавать во все endpoints, требующие авторизации.
	2. Регистрация и авторизация пользователей по почте и паролю:
		- При регистрации используется endpoint /register. В базе создаётся и сохраняется новый пользователь желаемого типа: обычный пользователь (client) или модератор (moderator).
		- У созданного пользователя появляется токен endpoint /login. При успешной авторизации по почте и паролю возвращается токен для пользователя с соответствующим ему уровнем доступа.
2. **Создание дома:**
	1. Только модератор имеет возможность создать дом используя endpoint /house/create. В случае успешного запроса возвращается полная информация о созданном доме
3. **Создание квартиры:**
	1. Создать квартиру может любой пользователь, используя endpoint /flat/create. При успешном запросе возвращается полная информация о квартире.
	2. Если жильё успешно создано через endpoint /flat/create, то объявление получает статус модерации created.
	3. У дома, в котором создали новую квартиру, обновляется дата последнего добавления жилья. 
4. **Модерация квартиры:**
	1. Статус модерации квартиры может принимать одно из четырёх значений: created, approved, declined, on moderation.
	2. Только модератор может изменить статус модерации квартиры с помощью endpoint /flat/update. При успешном запросе возвращается полная информация об обновленной квартире.
5. **Получение списка квартир по номеру дома:**
	1. Используя endpoint /house/{id}, обычный пользователь и модератор могут получить список квартир по номеру дома. Только обычный пользователь увидит все квартиры со статусом модерации approved, а модератор — жильё с любым статусом модерации.
6. **Дополнительно.** Подписка на уведомления о новых квартирах в доме по его номеру. Обычный пользователь может подписаться на такие уведомления с помощью endpoint /house/{id}/subscribe.

### Общие вводные

У сущности **«Дом»** есть:  
- уникальный номер дома
- адрес
- год постройки
- застройщик (у 50% домов)
- дата создания дома в базе
- дата последнего добавления новой квартиры дома

У сущности **«Квартира»** есть:
- номер квартиры
- цена (целое число)
- количество комнат

**Связи между сущностями:**
1. Каждая квартира может иметь только одно соответствие с домом (один к одному).
2. Номер дома служит уникальным идентификатором самого дома.
3. Номер квартиры не является уникальным идентификатором. Например, квартира №1 может находиться как в доме №1, так и в доме №2, и в этом случае это будут разные квартиры.

Список квартир в доме — ключевая функция, которой пользуются: 
- Модераторы — получают полный список всех объявлений в доме вне зависимости от статуса модерации.
- Пользователи — получают список только прошедших модерацию объявлений. 
Важно гарантировать быстрый отклик endpoint для пользователей. 
## Условия
1. Используйте этот [API](https://github.com/avito-tech/backend-bootcamp-assignment-2024/blob/main/api.yaml).
2. Реализация пользовательской авторизаций не является обязательным условием.  Поэтому токен авторизации можете получить из метода /dummyLogin, описанного в пункте 1 API. В параметрах запроса можно выбрать роль пользователя: модератор или обычный пользователь. В зависимости от роли будет сгенерирован токен с определённым уровнем доступа.
3. Всего квартир (до 20kk), RPS — 1k, SLI времени ответа — 50 мс, SLI успешности ответа — 99.99%
4. Для авторизации доступов должны использоваться два вида токенов: обычного пользователя и модератора. Получение списка квартир и публикация нового объявления может происходить с помощью токена пользователя или модератора, остальные действия могут выполняться только с помощью токена модератора.
5. Разработайте интеграционные и модульные тесты для сценариев получения списка квартир и процесса публикации новой квартиры.
6. Квартира может не пройти модерацию. В таком случае её видят только модераторы. 
7. Работать с сервисом могут несколько модераторов. При этом конкретную квартиру может проверять только один модератор. Перед началом работы нужно перевести квартиру в статус on moderate — тем самым запретив брать её на проверку другим модераторам. В конце квартиру переводят в статус approved или declined.
## Дополнительные задания:


## Требования по стеку

- **Язык сервиса:** – Go.
- **База данных:** – предпочтительно PostgreSQL, но можно выбрать другую удобную вам. Нельзя использовать ORM для взаимодействия с базой. Допустимо использовать билдеры для запросов, например, такой: https://github.com/Masterminds/squirrel
- **Для деплоя зависимостей и самого сервиса** нужно использовать Docker или Docker & DockerCompose.
## Дополнения к решению

Если у вас возникнут вопросы, ответов на которые нет в условиях, то принимать решения можете самостоятельно. В таком случае приложите к проекту Readme-файл со списком вопросов и объяснениями своих решений.
## Оформление и отправка решения

Создайте публичный git-репозиторий на любом хосте (GitHub, GitLab и другие), содержащий в master/main ветке:
1. Код сервиса;
2. Docker или Docker & DockerCompose или описанную в Readme.md инструкцию по запуску;
3. Описанные в Readme.md вопросы или проблемы, с которыми вы столкнулись, и описание своих решений.

Прикрепите ссылку на репозиторий в письмо на почте от организаторов программы.